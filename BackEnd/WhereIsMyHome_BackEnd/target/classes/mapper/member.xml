<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.member.model.mapper.MemberMapper">
	
	<resultMap type="memberDto" id="member">
		<result column="userId" property="userId"/>
		<result column="userPwd" property="userPwd"/>
		<result column="userName" property="userName"/>
		<result column="emailId" property="emailId"/>
		<result column="emailDomain" property="emailDomain"/>
		<result column="joinDate" property="joinDate"/>
		<result column="grade" property="grade"/>
	</resultMap>
	
	
	<insert id="join" parameterType="memberDto">
		insert into members(userId, userPwd, userName, emailId, emailDomain, grade)
		values (#{userId}, #{userPwd}, #{userName}, #{emailId}, #{emailDomain}, #{grade})
	</insert>
	
	
	
	<!-- 
	<select id="login" parameterType="map" resultMap="member">
		select * from members
		where userId=#{userId}
	</select> -->
	
	<!-- 
	<select id="login" parameterType="map" resultMap="member">
		select userId, userName, token
		from members
		where userId = #{userId} and userPwd = #{userPwd}
	</select> -->
	
	<select id="login" parameterType="map" resultMap="member">
		select * <!-- userId, userName, token + userPwd(비밀번호도 같은지 확인하기 위해) -->
		from members
		where userId = #{userId}
	</select>
	
	<select id="userInfo" parameterType="string" resultMap="member">
		select userName, userId, emailId, emailDomain, joinDate, grade
		from members
		where userId = #{userId}
	</select>
	
	<update id="saveRefreshToken" parameterType="map">
		update members
		set token = #{token}
		where userId = #{userId}
	</update>
	
	<select id="getRefreshToken" parameterType="string" resultType="string">
		select token
		from members
		where userId = #{userId}
	</select>
	
	<update id="deleteRefreshToken" parameterType="map">
		update members
		set token = #{token, jdbcType=VARCHAR}
		where userId = #{userId}
	</update>
	
	
	
	
	<select id="idCheck" parameterType="String" resultType="int">
		select count(userId)
		from members
		where userId = #{userId}
	</select>
	
	<select id="findId" parameterType="map" resultMap="member">
		select * from members
	 	where userName=#{userName} and emailId=#{emailId} and emailDomain=#{emailDomain}
	</select>
	
	<select id="findPwd" parameterType="map" resultMap="member">
		select * from members
		where userId=#{userId} and userName=#{userName} and emailId=#{emailId} and emailDomain=#{emailDomain}
	</select>
	
	<update id="updateMember" parameterType="memberDto">
		update members
		set userName=#{userName}, userPwd=#{userPwd}, emailId=#{emailId}, emailDomain=#{emailDomain}
		where userId=#{userId}
	</update>
	
	<delete id="deleteMember" parameterType="String">
		delete from members
		where userId=#{userId}
	</delete>
	
</mapper>